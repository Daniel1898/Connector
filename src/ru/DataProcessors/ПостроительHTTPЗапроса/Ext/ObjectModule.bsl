#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс 

//Производит инициализацию построителя HTTP запросов
//
// Параметры:
//  ПараметрыИнициализации  - Струткура - структура с параметрами которые надо установить при инициализации
//    *URL - URL сервиса к которому нужно послать запрос
//    *Метод - HTTP метод который будет отправляться
//
Процедура Инициализировать(ПараметрыИнициализации) Экспорт 
	
	URL = ПараметрыИнициализации.URL;
	Метод = ПараметрыИнициализации.Метод;
	ДополнительныеПараметры = КоннекторHTTP.НовыеПараметры();
	Парамтеры = Новый Соответствие;
	
КонецПроцедуры

//Выполняет http запрос с параметрами установленными в построителе
//
// Возвращаемое значение:
//   HTTPОтвет   - Объект содержащий ответ на http запрос
//
Функция ВыполнитьЗапрос() Экспорт
	
	Если Метод = "GET" Тогда
		Ответ = КоннекторHTTP.Get(URL, , ДополнительныеПараметры, Сессия);
	ИначеЕсли Метод = "POST" Тогда
		Ответ = КоннекторHTTP.Post(URL, , ДополнительныеПараметры, Сессия);
	ИначеЕсли Метод = "OPTIONS" Тогда
		Ответ = КоннекторHTTP.Options(URL, ДополнительныеПараметры, Сессия); 
	ИначеЕсли Метод = "PUT" Тогда
		Ответ = КоннекторHTTP.Put(URL, , ДополнительныеПараметры, Сессия);
	ИначеЕсли Метод = "HEAD" Тогда
		Ответ = КоннекторHTTP.Head(URL, ДополнительныеПараметры, Сессия);
	ИначеЕсли Метод = "PATCH" Тогда
		Ответ = КоннекторHTTP.Patch(URL, , ДополнительныеПараметры, Сессия);
	ИначеЕсли Метод = "DELETE" Тогда
		Ответ = КоннекторHTTP.Delete(URL, , ДополнительныеПараметры, Сессия);
	Иначе
		Ответ = КоннекторHTTP.ВызватьМетод(Метод, URL, ДополнительныеПараметры, Сессия);
	КонецЕсли;
	
	Результат = Обработки.HTTPОтвет.Создать();
	Результат.Инициализировать(Ответ);
	
	Возврат Результат;
	
КонецФункции

//Добавляет новый заголовок запроса или изменяет существующий
//
// Параметры:
//  Ключ  - Строка - Имя заголовка
//  Значение  - Строка - Значение передаваемое в заголовке
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель запроса
//
Функция УстановитьЗаголовок(Ключ, Значение) Экспорт
	
	ДополнительныеПараметры.Заголовки.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

//Устанавливает параметр запроса
//
// Параметры:
//  Ключ  - Строка - Имя параметра
//  Значение  - Строка - Значение параметра
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель запроса
//
Функция УстановитьПараметрЗапроса(Ключ, Значение)
	
	ДополнительныеПараметры.ПараметрыЗапроса.Вставить(Ключ, Значение);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

//Устанавливает данные запроса
//
// Параметры:
//  Данные  - Произвольный - Данные которые необходимо передать в запросе
//    в случае если не передавать ничего в качестве значения записывает в данные пустую структуру
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель запроса
//
Функция УстановитьДанные(Данные = Неопределено) Экспорт
	
	ДополнительныеПараметры.Данные = ?(Данные = Неопределено, Новый Структура, Данные);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

//Добавляет данные  в запрос в случае если данные - структура
//
// Параметры:
//  Ключ  - Строка - Имя передаваемых данных
//  Значение  - Строка - Передаваемые данные 
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель запроса
//
Функция ДобавитьДанные(Ключ, Значение) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.Данные) = Тип("Структура") Тогда
		
		ДополнительныеПараметры.Данные.Вставить(Ключ, Значение);
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Данные не являются структурой.'", "ru");
		
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет файл в запрос.
//
// Параметры:
//   Имя - Строка - имя поля формы.
//   ИмяФайла - Строка - имя файла.
//   Данные - ДвоичныеДанные - двоичные данные файла.
//   Тип - Строка - MIME-тип файла
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель запроса
//
Функция ДобавитьФайл(Имя, ИмяФайла, Данные = Неопределено, Тип = Неопределено) Экспорт
	
	Файл = КоннекторHTTP.НовыйОтправляемыйФайл(Имя, ИмяФайла, Данные, Тип);
	ДополнительныеПараметры.Файлы.Добавить(Файл);
	
	Возврат ЭтотОбъект;
	
КонецФункции

#Область Аутентификация 

//Устанавливает Digest аутентификацию
//
// Параметры:
//  Пользователь  - Строка - имя пользователя используемое для аутентификации
//  Пароль  - Строка - пароль для аутентификации
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель с установленной аутентификацией
//
Функция УстановитьАутентификациюDigest(Пользователь = "", Пароль = "") Экспорт
	
	ДополнительныеПараметры.Аутентификация = КоннекторHTTP.НоваяАутентификацияDigest(Пользователь, Пароль);
	
	Возврат ЭтотОбъект; 
	
КонецФункции

//Устанавливает Basic аутентификацию
//
// Параметры:
//  Пользователь  - Строка - имя пользователя используемое для аутентификации
//  Пароль  - Строка - пароль для аутентификации
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель с установленной аутентификацией
//
Функция УстановитьАутентификациюBasic(Пользователь = "", Пароль = "") Экспорт
	
	ДополнительныеПараметры.Аутентификация = КоннекторHTTP.НоваяАутентификацияBasic(Пользователь, Пароль);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

//Устанавливает аутентификацию AWS4-HMAC-SHA256
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель с установленной аутентификацией
//
Функция УстановитьАутентификациюAWS4(КлючДоступа = "", СекретныйКлюч = "", Сервис = "", Регион = "") Экспорт
	
	ДополнительныеПараметры.Аутентификация = КоннекторHTTP.НоваяАутентификацияAWS4(КлючДоступа = "", СекретныйКлюч = "", Сервис = "", Регион = "");
	
	Возврат ЭтотОбъект;
	
КонецФункции

//Устанавливает аутентификацию операционной системы
//
// Возвращаемое значение:
//   ПостроительHTTPЗапроса   - построитель с установленной аутентификацией
//
Функция УстановитьАутентификациюОС() Экспорт
	
	ДополнительныеПараметры.Аутентификация = КоннекторHTTP.НоваяАутентификацияОС();
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти
#КонецОбласти

#КонецЕсли
